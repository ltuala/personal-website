"use strict";(self.webpackChunkdocusaurus_try_website=self.webpackChunkdocusaurus_try_website||[]).push([[7450],{113:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"setup-gogs","metadata":{"permalink":"/personal-website/setup-gogs","source":"@site/blog/2024-01-23-setup-gogs/index.mdx","title":"How to Setup Gogs","description":"Gogs allows deploying a local Git Server on your local machine. It comes with a web UI to facilitate pushing and pulling of code, it also includes pull requests and issues features.","date":"2024-01-23T00:00:00.000Z","formattedDate":"January 23, 2024","tags":[{"label":"gogs","permalink":"/personal-website/tags/gogs"},{"label":"git","permalink":"/personal-website/tags/git"},{"label":"mysql","permalink":"/personal-website/tags/mysql"}],"readingTime":1.155,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala"}],"frontMatter":{"slug":"setup-gogs","title":"How to Setup Gogs","authors":["ltuala"],"tags":["gogs","git","mysql"],"enableComments":true},"nextItem":{"title":"Adding Giscus to Docusaurus","permalink":"/personal-website/add-giscus-to-docusaurus"}},"content":"Gogs allows deploying a local Git Server on your local machine. It comes with a web UI to facilitate pushing and pulling of code, it also includes pull requests and issues features. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n:::caution Prerequisites\\r\\nGogs requires the following to be installed on your local machine: [Database (MySQL)](https://dev.mysql.com/downloads/) and [Git](https://git-scm.com/download/win)\\r\\n:::\\r\\n## Here\'s a step-by-step guide on how to setup Gogs on your Windows machine:\\r\\n\\r\\n### 1. Install Gogs\\r\\n\\r\\nGogs can be downloaded [here](https://gogs.io/docs/installation/install_from_binary). Select ZIP under Windows system.\\r\\n![Gogs download](gogs-download.png)\\r\\n\\r\\n### 2. Create a MySQL database named `gogs`\\r\\n\\r\\nMake sure to set the charset to `utf8_general_ci`.\\r\\n![Gogs database](gogs-db.png)\\r\\n\\r\\n### 3. Unzip the file and install Gogs\\r\\n\\r\\nRun the following command:\\r\\n\\r\\n```\\r\\n./gogs web\\r\\n```\\r\\nFor the `Database Type`, select `MySQL`.Fill up the necessary details like `User` and `Password`.\\r\\n![Gogs instal](gogs-install.png)\\r\\n\\r\\nClick `Install Gogs`.\\r\\n![Gogs instal](gogs-install2.png)\\r\\n\\r\\n### 4. Create a Gogs account\\r\\nAfter clicking Install Gogs. You\'ll be redirected to the login page. Create an account by clicking the `Need an account? Sign up now.`\\r\\n![Gogs sign-up](gogs-sign-up.png)\\r\\n\\r\\n### 5. Sign in\\r\\n\\r\\nSign in to your account.\\r\\n![Gogs sign-in](gogs-sign-in.png)\\r\\nAfter signing in you should now be able to use Gogs. Try to create your new Gogs repo.\\r\\n![Gogs dashboard](gogs-dashboard.png)\\r\\n\\r\\n\\r\\n:::note Congratulations!\\r\\n\\r\\nYou have now successfully installed Gogs on your local machine, allowing you to create code repository, push and pull code changes, and use the features like pull requests and issues.\\r\\n\\r\\n:::"},{"id":"add-giscus-to-docusaurus","metadata":{"permalink":"/personal-website/add-giscus-to-docusaurus","source":"@site/blog/2023-12-15-add-giscus-to-docusaurus/index.mdx","title":"Adding Giscus to Docusaurus","description":"As I browse through different tech blog articles and able to read this, inspired me to add commenting system in this blog.","date":"2023-12-15T00:00:00.000Z","formattedDate":"December 15, 2023","tags":[{"label":"giscus","permalink":"/personal-website/tags/giscus"},{"label":"docusaurus","permalink":"/personal-website/tags/docusaurus"}],"readingTime":1.635,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala"}],"frontMatter":{"slug":"add-giscus-to-docusaurus","title":"Adding Giscus to Docusaurus","authors":["ltuala"],"tags":["giscus","docusaurus"],"enableComments":true},"prevItem":{"title":"How to Setup Gogs","permalink":"/personal-website/setup-gogs"},"nextItem":{"title":"Ashabeneh\'s 30 Days of JavaScript","permalink":"/personal-website/30-days-of-js"}},"content":"As I browse through different tech blog articles and able to read [this](https://ljvmiranda921.github.io/notebook/2021/08/08/clip-vqgan/), inspired me to add commenting system in this blog.\\r\\n![utterances](utterances.png)This used [utterances](https://github.com/utterance/utterances), but I haven\'t found any reliable documentation on how to set it up on Docusaurus until I\'ve stumbled upon [giscus](https://giscus.app/).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Here\'s a step-by-step guide on how to add Giscus to Docusaurus:\\r\\n\\r\\n### Install Giscus\\r\\n\\r\\n```bash\\r\\nnpm install -D @giscus/react\\r\\n```\\r\\n\\r\\n### Enable Github Discussions\\r\\n\\r\\nDiscussion feature of Github can be seen [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/enabling-or-disabling-github-discussions-for-a-repository).\\r\\n\\r\\n### Giscus Configuration\\r\\n\\r\\nFill up necessary details [here](https://giscus.app/) to acquire giscus configuration. Look something like this:\\r\\n\\r\\n```html\\r\\n<script src=\\"https://giscus.app/client.js\\"\\r\\n        data-repo=\\"[ENTER REPO HERE]\\"\\r\\n        data-repo-id=\\"[ENTER REPO ID HERE]\\"\\r\\n        data-category=\\"[ENTER CATEGORY NAME HERE]\\"\\r\\n        data-category-id=\\"[ENTER CATEGORY ID HERE]\\"\\r\\n        data-mapping=\\"pathname\\"\\r\\n        data-strict=\\"0\\"\\r\\n        data-reactions-enabled=\\"1\\"\\r\\n        data-emit-metadata=\\"0\\"\\r\\n        data-input-position=\\"bottom\\"\\r\\n        data-theme=\\"preferred_color_scheme\\"\\r\\n        data-lang=\\"en\\"\\r\\n        crossorigin=\\"anonymous\\"\\r\\n        async>\\r\\n<\/script>\\r\\n```\\r\\n\\r\\n### Generate BlogPostItem component\\r\\n\\r\\nRun this comand in your terminal.\\r\\n\\r\\n```bash\\r\\nnpm run swizzle [theme name] [component name] -- --wrap\\r\\n\\r\\n# Example:\\r\\nnpm run swizzle @docusaurus/theme-classic BlogPostItem -- --wrap\\r\\n```\\r\\n\\r\\nIt will generate a BlogPostItem component under `src/theme`. Edit `index.js`\\r\\n\\r\\n```js\\r\\nimport React from \'react\';\\r\\nimport { useBlogPost } from \'@docusaurus/theme-common/internal\'\\r\\nimport BlogPostItem from \'@theme-original/BlogPostItem\';\\r\\nimport GiscusComponent from \'@site/src/components/GiscusComponent\';\\r\\nimport useIsBrowser from \'@docusaurus/useIsBrowser\';\\r\\n\\r\\nexport default function BlogPostItemWrapper(props) {\\r\\n  const { metadata, isBlogPostPage } = useBlogPost()\\r\\n  const isBrowser = useIsBrowser();\\r\\n\\r\\n  const { frontMatter, slug, title } = metadata\\r\\n  const { enableComments } = frontMatter\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <BlogPostItem {...props} />\\r\\n      {(enableComments && isBlogPostPage) && (\\r\\n        <GiscusComponent />\\r\\n      )}\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n### Create your Blog\\r\\nOn your markdown file, add `enableComments`\\r\\n```markdown\\r\\n---\\r\\ntitle: Title of blog\\r\\nauthors: author\\r\\ntags: [tagOne, tagTwo]\\r\\nenableComments: true # To enable Giscus\\r\\n---\\r\\n```\\r\\n\\r\\n### Test Your Docusaurus Site\\r\\n\\r\\nRun your Docusaurus development server to test the changes\\r\\n\\r\\n```bash\\r\\nnpm start\\r\\n```\\r\\n\\r\\nOpen your browser and navigate to the page where you added the Giscus comments section.\\r\\nCheck if the comments section is displayed and functional.\\r\\n\\r\\n:::note Congratulations!\\r\\n\\r\\nYou have successfully added Giscus to your Docusaurus site, allowing users to leave comments using their GitHub accounts.\\r\\n\\r\\n:::"},{"id":"30-days-of-js","metadata":{"permalink":"/personal-website/30-days-of-js","source":"@site/blog/2023-12-05-30-days-of-js/index.mdx","title":"Ashabeneh\'s 30 Days of JavaScript","description":"I find learning new programming language exciting.","date":"2023-12-05T00:00:00.000Z","formattedDate":"December 5, 2023","tags":[{"label":"javascript","permalink":"/personal-website/tags/javascript"},{"label":"challenges","permalink":"/personal-website/tags/challenges"}],"readingTime":6.235,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala"}],"frontMatter":{"slug":"30-days-of-js","title":"Ashabeneh\'s 30 Days of JavaScript","authors":["ltuala"],"tags":["javascript","challenges"],"enableComments":true},"prevItem":{"title":"Adding Giscus to Docusaurus","permalink":"/personal-website/add-giscus-to-docusaurus"},"nextItem":{"title":"Github Integration on Jira","permalink":"/personal-website/github-jira-integ"}},"content":"I find learning new programming language exciting. \\r\\nA lot more exciting if you come across with a well-structured and interactive course.\\r\\nOne such resource is [**\\"30 Days of JavaScript\\"**](https://github.com/Asabeneh/30-Days-Of-JavaScript) by Ashabeneh, recommended by my colleague [JC](https://github.com/jcawesome).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::info\\r\\n[**\\"30 Days of JavaScript\\"**](https://github.com/Asabeneh/30-Days-Of-JavaScript) by Ashabeneh, can be found in Github, there is a markdown file for each day consisting of lectures as well as exercises.\\r\\nIf you\'re the type of learner who thrives on reading rather than following video tutorials, then this course might be the perfect fit for you.\\r\\n:::\\r\\n\\r\\n## Course Outline\\r\\n[^1]![30 Days Course Outline](30D-course-outline.png)\\r\\n\\r\\n### Day 1 to 5: JavaScript Fundamentals\\r\\nYou will learn the JavaScript fundamentals: console, script structure etc, data types, conditionals and variables.\\r\\n\\r\\n#### Some Learnings \\r\\nHere are some topics or ideas derived from the course to provide you some snippet of the lectures, these are somewhat I find unique compared to other programming languages that I\'ve known so far.\\r\\n\\r\\n:::note typeof\\r\\n\\r\\nTo check the data type of a certain variable, we use the **typeof** operator. See the following example.\\r\\n\\r\\n```js\\r\\nconsole.log(typeof \'Asabeneh\') // string\\r\\nconsole.log(typeof 5) // number\\r\\nconsole.log(typeof true) // boolean\\r\\nconsole.log(typeof null) // object type\\r\\nconsole.log(typeof undefined) // undefined\\r\\n```\\r\\nSee [checking data types](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/readMe.md#checking-data-types)\\r\\n:::\\r\\n\\r\\nThe syntax is quite new to me.\\r\\n\\r\\n:::note Window prompt() method\\r\\n\\r\\nThe window prompt methods display a prompt box with an input on your browser to take input values and the input data can be stored in a variable. The prompt() method takes two arguments. The second argument is optional.\\r\\n\\r\\n```js\\r\\nprompt(\'required text\', \'optional text\')\\r\\n```\\r\\n\\r\\n```js\\r\\nlet number = prompt(\'Enter number\', \'number goes here\')\\r\\nconsole.log(number)\\r\\n```\\r\\n\\r\\nSee [window prompt() method](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/readMe.md#checking-data-types)\\r\\n:::\\r\\n\\r\\nUsing the browser as an interface instead of the terminal for inputting data.\\r\\n\\r\\n### Day 6 to 20: JavaScript Programming\\r\\nAs you advance, the foundation of programming will come into play by using loops, functions, objects, classes, etc. \\r\\nYou can now start with dynamic programming then will let you explore concepts like promises, focusing on data handling and manipulation.\\r\\nCompleting provided exercises, which are categorize into three levels, is a must to fully understand the concepts.\\r\\n\\r\\n:::note sample exercises\\r\\n\\r\\nExercises: Level 1\\r\\n\\r\\n1. Declare a function _fullName_ and it print out your full name.\\r\\n2. Declare a function _fullName_ and now it takes firstName, lastName as a parameter and it returns your full - name.\\r\\n\\r\\n...\\r\\n\\r\\nExercises: Level 2\\r\\n\\r\\n1. Linear equation is calculated as follows: _ax + by + c = 0_. Write a function which calculates value of a linear equation, _solveLinEquation_.\\r\\n2. Quadratic equation is calculated as follows: _ax2 + bx + c = 0_. Write a function which calculates value or values of a quadratic equation, _solveQuadEquation_.\\r\\n\\r\\n    ```js\\r\\n    console.log(solveQuadratic()) // {0}\\r\\n    console.log(solveQuadratic(1, 4, 4)) // {-2}\\r\\n    console.log(solveQuadratic(1, -1, -2)) // {2, -1}\\r\\n    console.log(solveQuadratic(1, 7, 12)) // {-3, -4}\\r\\n    console.log(solveQuadratic(1, 0, -4)) //{2, -2}\\r\\n    console.log(solveQuadratic(1, -1, 0)) //{1, 0}\\r\\n    ```\\r\\n...\\r\\n\\r\\nExercises: Level 3\\r\\n\\r\\n1. Modify the _userIdGenerator_ function. Declare a function name _userIdGeneratedByUser_. It doesn\u2019t take any parameter but it takes two inputs using prompt(). One of the input is the number of characters and the second input is the number of ids which are supposed to be generated.\\r\\n\\r\\n    ```sh\\r\\n    userIdGeneratedByUser()\\r\\n    \'kcsy2\\r\\n    SMFYb\\r\\n    bWmeq\\r\\n    ZXOYh\\r\\n    2Rgxf\\r\\n    \'\\r\\n    userIdGeneratedByUser()\\r\\n    \'1GCSgPLMaBAVQZ26\\r\\n    YD7eFwNQKNs7qXaT\\r\\n    ycArC5yrRupyG00S\\r\\n    UbGxOFI7UXSWAyKN\\r\\n    dIV0SSUTgAdKwStr\\r\\n    \'\\r\\n    ```\\r\\n\\r\\n2. Write a function name _rgbColorGenerator_ and it generates rgb colors.\\r\\n\\r\\n    ```sh\\r\\n    rgbColorGenerator()\\r\\n    rgb(125,244,255)\\r\\n    ```\\r\\n...\\r\\n:::\\r\\n\\r\\nIts well-curated exercises is what I loved the most in this course.\\r\\n\\r\\n### Day 21 to 22: DOM \\r\\nAfter foundation of programming, you will start working with the Document Object Model (DOM). \\r\\nEnabling you to dynamically modify CSS and HTML, fancy stuff \ud83d\ude0a. \\r\\nThis will give you a brief overview on how responsive and interactive websites are created. \\r\\n\\r\\n### Day 23: Event Listeners\\r\\nAs you now know how to modify DOM elements, events and event listeners is essential if you want to create responsive and interactive websites. \\r\\nThis will allow you to create conditions on different user interactions.\\r\\n  \\r\\n### Day 24 to 30: Mini Projects: \\r\\nThe last part of the course will be devoted to mini projects.\\r\\nThis will focus on applying everything you\'ve learnt so far, so there are no lectures only exercises.\\r\\nThere are plenty of project ideas, so there are options for you to try different mini projects based on your interests.\\r\\n\\r\\n:::note sample mini project\\r\\nDevelop a small application which calculate a weight of an object in a certain planet.\\r\\n![Solar System](dom_min_project_solar_system_day_4.1.gif)\\r\\n\\r\\nSee [Mini Project Solar System](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/24_Day_Project_solar_system/24_day_project_solar_system.md#exercise-level-1)\\r\\n:::\\r\\n\\r\\n## Some Other Learnings\\r\\nHere are some other topics or ideas derived from the course that I find interesting:\\r\\n\\r\\n:::note for of loop\\r\\n\\r\\nWe use for of loop for arrays. It is very hand way to iterate through an array if we are not interested in the index of each element in the array.\\r\\n\\r\\n```js\\r\\nfor (const element of arr) {\\r\\n  // code goes here\\r\\n}\\r\\n```\\r\\n\\r\\nSee [for of loop](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/06_Day_Loops/06_day_loops.md#for-of-loop)\\r\\n:::\\r\\n\\r\\nWell the syntax is new to me.\\r\\n\\r\\n:::note argument\\r\\n\\r\\n A function declaration provides a function scoped arguments array like object. Any thing we passed as argument in the function can be accessed from arguments object inside the functions. Let us see an example\\r\\n\\r\\n ```js\\r\\n// Let us access the arguments object\\r\\n\u200b\\r\\nfunction sumAllNums() {\\r\\n  console.log(arguments)\\r\\n}\\r\\n\\r\\nsumAllNums(1, 2, 3, 4)\\r\\n// Arguments(4)\xa0[1, 2, 3, 4, callee: \u0192, Symbol(Symbol.iterator): \u0192]\\r\\n\\r\\n```\\r\\n\\r\\nSee [unlimited number of parameters in regular function](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/07_Day_Functions/07_day_functions.md#unlimited-number-of-parameters-in-regular-function)\\r\\n:::\\r\\n\\r\\nThe `arguments` holds the value of passed parameters of the function. \\r\\n\\r\\n:::note arrow function\\r\\n\\r\\n Arrow function does not have the function scoped arguments object. To implement a function which takes unlimited number of arguments in an arrow function we use spread operator followed by any parameter name.  Any thing we passed as argument in the function can be accessed as array in the arrow function. Let us see an example\\r\\n\\r\\n ```js\\r\\n// Let us access the arguments object\\r\\n\u200b\\r\\nconst sumAllNums = (...args) => {\\r\\n  // console.log(arguments), arguments object not found in arrow function\\r\\n  // instead we use a parameter followed by spread operator (...)\\r\\n  console.log(args)\\r\\n}\\r\\n\\r\\nsumAllNums(1, 2, 3, 4)\\r\\n// [1, 2, 3, 4]\\r\\n\\r\\n```\\r\\n\\r\\nSee [unlimited number of parameters in arrow function](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/07_Day_Functions/07_day_functions.md#unlimited-number-of-parameters-in-arrow-function)\\r\\n:::\\r\\n\\r\\nThe distinction of JavaScript compared to other languages `=>`, the syntax of arrow function. Use spread operator instead of `arguments` if you use the arrow function syntax for creating the function.\\r\\n\\r\\n:::note order of script tag\\r\\n\\r\\nThe order of script tag matters, when importing variable from other files.\\r\\n\\r\\n```html\\r\\n<!DOCTYPE html>\\r\\n<html lang=\\"en\\">\\r\\n<head>\\r\\n    <meta charset=\\"UTF-8\\">\\r\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\r\\n    <title>Exercises</title>\\r\\n</head>\\r\\n<body>\\r\\n    <script src=\\"countries.js\\"><\/script>\\r\\n    <script src=\\"webTechs.js\\"><\/script>\\r\\n    <script src=\\"index.js\\"><\/script>\\r\\n</body>\\r\\n</html>\\r\\n```\\r\\nOn `index.js` file, you can import variables defined on either `countries.js` or `webTechs.js`. \\r\\nBut when you create script inside `webTechs.js` you cannot use directly the variable defined on `index.js`, only the variables defined on `countries.js`\\r\\n:::\\r\\n\\r\\n## Final Thoughts\\r\\nThe way the course is well-structured with exercises per day makes it manageable, although I struggle to be consistent. Well, that\'s on me, not the course itself. \\r\\nHere\'s the [repository](https://github.com/ltuala/30-Days-Of-JavaScript) of my progress.\\r\\n\\r\\n:::caution Heads up\\r\\n\\r\\nSome of the mini projects don\'t have a template for HTML and CSS, so you might find it difficult to accomplish them if you\'re not yet comfortable with HTML and CSS. \\r\\n\\r\\n:::\\r\\n\\r\\nThis course serves as a valuable resource, for a complete beginner like me or someone looking to learn or revisit the JavaScript language.\\r\\nI would like to express my gratitude to [JC](https://github.com/jcawesome) for introducing me to this course.\\r\\n\\r\\n## Footnotes\\r\\n[^1]: Built using [draw.io](https://app.diagrams.net/) and [undraw](https://undraw.co/illustrations)"},{"id":"github-jira-integ","metadata":{"permalink":"/personal-website/github-jira-integ","source":"@site/blog/2023-06-29-github-jira-integ/index.mdx","title":"Github Integration on Jira","description":"Integrating Jira and Github provides a more organized software development lifecycle.","date":"2023-06-29T00:00:00.000Z","formattedDate":"June 29, 2023","tags":[{"label":"github","permalink":"/personal-website/tags/github"},{"label":"jira","permalink":"/personal-website/tags/jira"}],"readingTime":1.33,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala"}],"frontMatter":{"slug":"github-jira-integ","title":"Github Integration on Jira","authors":["ltuala"],"tags":["github","jira"],"enableComments":true},"prevItem":{"title":"Ashabeneh\'s 30 Days of JavaScript","permalink":"/personal-website/30-days-of-js"},"nextItem":{"title":"Timefold PAS Use Case","permalink":"/personal-website/setup-pas"}},"content":"Integrating Jira and Github provides a more organized software development lifecycle.\\r\\nAs the issues will link to a specific branch in your Github code repository.\\r\\nProviding a more organized workflow since Jira will be used as a develop management tool and Github will be the version control tool as a result a more structured development workflow.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::caution\\r\\nTo follow along the steps make sure you have Admin privileges on the Jira account and Github account.\\r\\n:::\\r\\n\\r\\n## 1. On the Jira account under Apps, get the app Github for Jira\\r\\nInstalling __Github for Jira__ will be the first step to configure Github Jira integration.\\r\\n![Github for Jira](github-for-jira.png)\\r\\n### a. Go to Apps > Explore more apps.\\r\\n![Apps](apps.png)\\r\\n### b. On the search box, type Github for Jira. then, select Get app.\\r\\n![Type Github for Jira](type-github-for-jira.png)\\r\\n![Get App](get-app.png)\\r\\n### c. Select Get it now.\\r\\n![Get it now](get-it-now.png)\\r\\n## 2. Github for Jira configuration\\r\\nNext steps, are how to setup the configuration for integrating Github to Jira.\\r\\n### a. Select Get Started.\\r\\n![Get started](get-started.png)\\r\\n### b. Select Connect Github organization.\\r\\n![Connect Github organization](connect-github-organization.png)\\r\\n### c. Select Github Cloud. Then, select Continue.\\r\\n![Github Cloud](github-cloud.png)\\r\\n### d. Login to Github.\\r\\n![Github login](github-login.png)\\r\\n### e. Click Authorize Jira.\\r\\n![Authorize Jira](authorize-jira.png)\\r\\n### f. Select Install Github for Jira on a new organization.\\r\\n![Connect Github](connect-github.png)\\r\\n![Install Jira](install-jira.png)\\r\\n### g. Go back to Jira, select Conect Github organization and click Connect.\\r\\n![Connect Organization](connect-organization.png)<br />\\r\\nNow, Jira will take few minutes depending on the size of Github repositories.\\r\\n![Github loading](github-loading.png)\\r\\n<br />\\r\\n\\r\\n:::info\\r\\nSee [Integrate Jira Software with GitHub Cloud](https://support.atlassian.com/jira-cloud-administration/docs/integrate-with-github/), for official documentation.\\r\\n:::"},{"id":"setup-pas","metadata":{"permalink":"/personal-website/setup-pas","source":"@site/blog/2023-06-28-setup-pas/index.mdx","title":"Timefold PAS Use Case","description":"Current Timefold examples already runs on Quarkus 3 already. Let\u2019s see how we can successfully setup a Timefold use case example and use it as a baseline for another Timefold project.","date":"2023-06-28T00:00:00.000Z","formattedDate":"June 28, 2023","tags":[{"label":"timefold","permalink":"/personal-website/tags/timefold"},{"label":"quarkus","permalink":"/personal-website/tags/quarkus"}],"readingTime":1.105,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala"}],"frontMatter":{"slug":"setup-pas","title":"Timefold PAS Use Case","authors":["ltuala"],"tags":["timefold","quarkus"],"enableComments":true},"prevItem":{"title":"Github Integration on Jira","permalink":"/personal-website/github-jira-integ"}},"content":"Current Timefold examples already runs on Quarkus 3 already. Let\u2019s see how we can successfully setup a Timefold use case example and use it as a baseline for another Timefold project.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n:::info\\r\\nTimefold [PAS](https://timefold.ai/docs/timefold-solver/latest/use-cases-and-examples/use-cases-and-examples.html#bedAllocation) example was not built with Quarkus, \\r\\nas a result I just use the [Maintenance scheduling](https://github.com/TimefoldAI/timefold-quickstarts#maintenance-scheduling) use case as a baseline.\\r\\n:::\\r\\n\\r\\n## Setup a new Quarkus Project\\r\\n:::caution\\r\\n**Quarkus 3** requires a Java version **17+**. See [JDK on Windows](https://docs.oracle.com/en/java/javase/20/install/installation-jdk-microsoft-windows-platforms.html), for official documentation on how to install JDK.\\r\\n:::\\r\\n### Go to [code.quarkus.io](https://code.quarkus.io/)\\r\\nFill in the `Group`, `Artifact` and `Build Tool`\\r\\n![quarkus-io](quarkus-io.png)\\r\\n### Click Generate your application\\r\\nNo other library or package is needed on our new project.\\r\\n![Generate you application](generate-your-application.png)\\r\\n### Select download the zip.\\r\\n![Download zip](download-zip.png)\\r\\n### Extract and open via code editor.\\r\\nThe folder structure and content should look like this.\\r\\n![Folder structure](folder-structure.png)\\r\\n## Setup Timefold Quickstarts\\r\\n### Clone or download timefold-quickstarts repository\\r\\nClick [here](https://github.com/TimefoldAI/timefold-quickstarts) to clone or download the repository.\\r\\n![Timefold quickstarts](timefold-quickstarts.png)\\r\\n### Run the Maintence scheduling use case\\r\\n![Maintenance scheduling](maintenance-scheduling.png)\\r\\n### Merge the Maintenance scheduling use case to the new Quarkus project.\\r\\nMake sure to refactor the package name on every code files. Just overwrite the `pom.xml` with the example packages. <br />\\r\\nOn `line 8` onwards, this is where I overwrite all the packages.\\r\\n![Overwrite pom](overwrite-pom.png)\\r\\nCustomize `index.html` to your liking."}]}')}}]);