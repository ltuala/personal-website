"use strict";(self.webpackChunkdocusaurus_try_website=self.webpackChunkdocusaurus_try_website||[]).push([[1163],{8893:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"60-days-of-python","metadata":{"permalink":"/personal-website/blog/60-days-of-python","source":"@site/blog/2025-02-18-60-days-of-python/index.mdx","title":"Ardit Sulce\'s \\"Python Mega Course Learn Python in 60 Days, Build 20 Apps\\"","description":"\\"Python Mega Course: Learn Python in 60 Days, Build 20 Apps\\" by Ardit Sulce is a course that spans for 60 days.","date":"2025-02-18T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/personal-website/blog/tags/python"},{"inline":true,"label":"challenges","permalink":"/personal-website/blog/tags/challenges"}],"readingTime":4.265,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"60-days-of-python","title":"Ardit Sulce\'s \\"Python Mega Course Learn Python in 60 Days, Build 20 Apps\\"","authors":["ltuala"],"tags":["python","challenges"],"enableComments":true},"unlisted":false,"nextItem":{"title":"How to Dockerized a Timefold Application","permalink":"/personal-website/blog/dockerized-a-timefold-app"}},"content":"[**\\"Python Mega Course: Learn Python in 60 Days, Build 20 Apps\\"**](https://www.udemy.com/course/the-python-mega-course/?course_id=692188) by Ardit Sulce is a course that spans for 60 days.\\nYou\u2019ll build 20 mini projects inspired by real-world applications along the way, reinforcing everything you learn.\\n\x3c!--truncate--\x3e\\n\\n:::info\\n[**\\"Python Mega Course: Learn Python in 60 Days, Build 20 Apps\\"**](https://www.udemy.com/course/the-python-mega-course/?course_id=692188) by Ardit Sulce, can be found in Udemy, each day consist of lectures as well as exercises.\\n:::\\n\\n## Course Outline [^1]\\n<iframe\\n  src=\\"https://docs.google.com/viewer?url=https://drive.google.com/uc?id=1T0szUG729O9-Pl4dVP8mmG3OpeiLGsyO&embedded=true\\"\\n  width=\\"100%\\"\\n  height=\\"1000px\\"\\n  style={{ border: \\"none\\" }}\\n></iframe>\\n\\n### Day 1 to 20: Python Basics\\nThe first 20 days are all about getting familiar with Python syntax, data types, control flow (if-else, loops), functions, and basic error handling. \\nIt\u2019s perfect for those with little to no programming experience.\\n\\nBy day 20, you\'ll be confident writing basic Python scripts and solving simple problems; you will also finish the todo app.\\n[![asciicast](https://asciinema.org/a/HVAbdApgKA6aEcLwzao2yQ5c9.svg)](https://asciinema.org/a/HVAbdApgKA6aEcLwzao2yQ5c9)\\n[![asciicast](https://asciinema.org/a/8xO82Pasvbuk0MKT7MROiRBhf.svg)](https://asciinema.org/a/8xO82Pasvbuk0MKT7MROiRBhf)\\nI have also explored the capability of hosting the web application on Streamlit. Here\u2019s an example demonstrating its [implementation.](https://ltuala-learning-python-web-app1.streamlit.app/)\\n#### Some Learnings \\nThe Python Shell is a built-in tool that lets you write and run Python code one line at a time.\\nIt\u2019s a great place to test out small snippets of code.\\n\\n:::note Python shell\\n\\nEarly in the course it often uses the Python Shell to demonstrate basic concepts. To open Python shell type this on your terminal:\\n```python\\npython\\n```\\nTo exit the shell:\\n```python\\nexit()\\n```\\n:::\\n\\n### Day 21 to 26: Python Intermediate\\nIn this portion you\u2019ll explore: file handling (text, CSV, PDF) and more advanced use of functions and modules.\\n\\n:::note sample streamlit app\\nStreamlit was further explored, this time a sample portfolio of your own was built.\\n\\nSee [sample streamlit app](https://ltuala-learning-python-app2-portfolio.streamlit.app/)\\n:::\\nHere is a sample output of automating a PDF page.\\n![PDF Page](app3_output.png)  \\nAutomation of PDF creation was also explored by generating some sort of invoices.\\n![PDF Page](app4_output.png)\\n### Day 27 to 28: APIs \\nA brief introduction to working with APIs (Application Programming Interfaces).  \\nThis portion tackles: how to fetch data from APIs using Python\u2019s requests library and parsing JSON responses.\\n![News API](app5_output.png)\\n### Day 29 to 37: Data Analysis\\nAPIs was further explored on this section by building small project using live data (e.g. weather apps)  \\n![Weather API](app6_output.png)\\n![Weather API](app7_output1.png)\\n![Weather API](app7_output2.png)\\nAlso, this segment introduces you to Python\u2019s data analysis stack on sentiment analysis.\\n![Book Analysis](app8_output.png)\\n### Day 38 to 39: Web Scraping \\nThis time you will work with website to extract information. This section includes:\\n- Navigating HTML\\n- Building scraper for example tour schedules\\n\\n![Web Scraping](app10_output1.png)\\n![Web Scraping](app10_output2.png)\\n### Day 40 to 44: OOP (Object-Oriented Programming) \\nNow you\'ll deep dive on scalable code, which introduces you to OOP concepts like:\\n- Classes and objects\\n- Inheritance  \\n\\nIn this portion of the course you\'ll explore building a Webcam Detection application.  \\n![Webcam Detection](app9_input.png)\\n![Webcam Detection](app9_output1.png)\\n![Webcam Detection](app9_output2.png)\\n### Day 45 to 49: SQL and GUI\\nNow will go to interactive portion. You\u2019ll cover:\\n- Basics of SQL (SQLite is introduced)\\n- Python Integration with databases\\n- How to build GUIs with Tkinter\\n\\nYou\'ll create applications with UI (user interfaces) and persistent data storage.\\n![SQL and GUI](app13_input.png)\\n![SQL and GUI](app13_output1.png)\\n![SQL and GUI](app13_output2.png)\\n### Day 50 to 57: Web Development\\nThis portion focus on builing web application with the use of [**Flask**](https://flask.palletsprojects.com/en/stable/) and [**Django**](https://www.djangoproject.com/).\\nYou\'ll learn how to set up routes, templates and forms.\\nAnd of course, how to deploy this simple web applications.\\n### Day 58 to 59: Data Science and Machine Learning\\nA brief introduction to machine learning and data science. Activities includes:\\n- Training basic models \\n- Making predictions and interpreting results\\n\\nIn this portion [Deepnote](https://deepnote.com/) tool was introduced. \\n### Day 60: Publish a Python Package\\nYou\u2019ll learn how to structure a Python project and be able to upload it to [PyPI](https://pypi.org/).  \\n![Python Package](app20_output1.png)\\nIts a way to share your work to the community. It\u2019s a satisfying way to wrap up the course.  \\n![Python Package](app20_output2.png)\\nAs you can see above, you can see your project being installed as how you usually install Python libraries.\\n## Some Other Learnings\\nBeyond the structured content, the course also teaches you:\\n- Best practices in programming\\n- Version control using [Git](https://git-scm.com/)\\n- Debugging strategies \\n\\nYou\u2019ll also get exposure to useful Python libraries and tools.\\n\\n:::note virtual environment\\nIn this course, you\u2019ll build projects requiring different libraries and versions. \\nTo keep your projects clean and avoid conflicts between packages, the course encourages using a virtual environment for each app.\\n\\nTo create a virtual environment in your project directory, run:\\n```python\\npython -m venv .venv\\n```\\n\\nSee more details on [virtual environment](https://docs.python.org/3/library/venv.html)\\n:::\\n\\n## Final Thoughts\\nArdit Sulce\'s Python Mega Course is for beginner to intermediate Python developer.\\nThis course is project-driven, meaning you\u2019re always applying what you learn in real time.\\n\\n\\n:::caution Heads up\\n\\nWhen your working on the portfolio app, you might find the available `png` material to be outdated so you might need to check out other `png` to better suit the projects.\\n\\n:::\\n\\nIf you like learning by doing, you should check out this course.\\nHere\'s the [repository](https://github.com/ltuala/learning-python) of my progress.\\n\\n## Footnotes\\n[^1]: Derived from the course material"},{"id":"dockerized-a-timefold-app","metadata":{"permalink":"/personal-website/blog/dockerized-a-timefold-app","source":"@site/blog/2024-03-08-dockerized-a-timefold-app/index.mdx","title":"How to Dockerized a Timefold Application","description":"Timefold examples are available with a Dockerfile already for you to start with. In this blog, I tried to explore how to deploy the Timefold application via docker.","date":"2024-03-08T00:00:00.000Z","tags":[{"inline":true,"label":"docker","permalink":"/personal-website/blog/tags/docker"},{"inline":true,"label":"timefold","permalink":"/personal-website/blog/tags/timefold"},{"inline":true,"label":"postgresql","permalink":"/personal-website/blog/tags/postgresql"}],"readingTime":1.725,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"dockerized-a-timefold-app","title":"How to Dockerized a Timefold Application","authors":["ltuala"],"tags":["docker","timefold","postgresql"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Ardit Sulce\'s \\"Python Mega Course Learn Python in 60 Days, Build 20 Apps\\"","permalink":"/personal-website/blog/60-days-of-python"},"nextItem":{"title":"How to Add Search Bar in Docusaurus","permalink":"/personal-website/blog/add-search-bar"}},"content":"Timefold examples are available with a Dockerfile already for you to start with. In this blog, I tried to explore how to deploy the Timefold application via docker.\\n\\n\x3c!--truncate--\x3e\\n:::caution Prerequisites\\n**Timefold** requires a Java version **17+**. See [JDK on Windows](https://docs.oracle.com/en/java/javase/20/install/installation-jdk-microsoft-windows-platforms.html), for official documentation on how to install JDK.\\n:::\\n\\n## Here\'s a step-by-step guide on how I deploy the Timefold application via docker:\\n\\n:::note High-level Overview\\n![High-level](dockerrized-high-level.png)\\n:::\\nHere I just deploy the Timefold application via docker and use a local database as the data source.\\n\\n### 1. Package the Application\\nBefore building the container image, package the application first. Run the command:  \\n```\\nmvn clean install \\n```\\n\\n### 2. Build the Image\\nTo build the image use the Dockerfile readily available. \\n:::note Dockerfile code\\n```\\nFROM registry.access.redhat.com/ubi8/openjdk-17:1.15\\n\\nENV LANGUAGE=\'en_US:en\'\\n\\n\\n# We make four distinct layers so if there are application changes the library layers can be re-used\\nCOPY --chown=185 target/quarkus-app/lib/ /deployments/lib/\\nCOPY --chown=185 target/quarkus-app/*.jar /deployments/\\nCOPY --chown=185 target/quarkus-app/app/ /deployments/app/\\nCOPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/\\n\\n# Add the extra host entry to the container\'s /etc/hosts file\\n# RUN echo \\"host.docker.internal    host-gateway\\" >> /etc/hosts\\n\\nEXPOSE 8080\\nUSER 185\\nENV JAVA_OPTS=\\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\\"\\nENV JAVA_APP_JAR=\\"/deployments/quarkus-run.jar\\"\\n```\\n:::\\n\\nThen, run a `docker build` command:\\n```\\ndocker build -f src/main/docker/Dockerfile.jvm -t quarkus/campaign-scheduling .\\n```\\n- `quarkus/campaign-scheduling` is the image name\\n\\nIf you have a docker desktop available the image should look like this:\\n![Docker image](image-name.png)\\n\\n### 3. Modify `application.properties`\\nTo be able to connect to the local database make sure to update the `quarkus.datasource.jdbc.url`, set it to `host.docker.internal` instead of `localhost`. \\nThis tells docker to connect to a custom network made available by docker and this particular custom network allows you to connect to your local `localhost`.\\n![Network](application-properties.png)\\n\\n### 4. Run the application\\nTo run the aplicaion, run `docker run` command:\\n```\\ndocker run -i --rm -p 8080:8080 --add-host=host.docker.internal:host-gateway quarkus/campaign-scheduling\\n```\\n![Docker run](docker-run.png)\\n\\n\\n### 5. Test the Application\\nConnect to the application via your local browser.\\n![Test application](test-application.png)\\n\\n:::note Congratulations!\\nYou have now successfully deployed a Timefold application via docker and allow it to connect to a local database.\\n:::"},{"id":"add-search-bar","metadata":{"permalink":"/personal-website/blog/add-search-bar","source":"@site/blog/2024-03-05-add-search-bar/index.mdx","title":"How to Add Search Bar in Docusaurus","description":"A search bar provides a way for user to easily navigate across your website. Here will explore ho to add a search bar powered by Algolia in Docusaurus.","date":"2024-03-05T00:00:00.000Z","tags":[{"inline":true,"label":"algolia","permalink":"/personal-website/blog/tags/algolia"},{"inline":true,"label":"docusaurus","permalink":"/personal-website/blog/tags/docusaurus"}],"readingTime":2.335,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"add-search-bar","title":"How to Add Search Bar in Docusaurus","authors":["ltuala"],"tags":["algolia","docusaurus"],"enableComments":true},"unlisted":false,"prevItem":{"title":"How to Dockerized a Timefold Application","permalink":"/personal-website/blog/dockerized-a-timefold-app"},"nextItem":{"title":"How to Setup Gogs","permalink":"/personal-website/blog/setup-gogs"}},"content":"A search bar provides a way for user to easily navigate across your website. Here will explore ho to add a search bar powered by [Algolia](https://www.algolia.com) in [Docusaurus](https://docusaurus.io/).\\n\\n\x3c!--truncate--\x3e\\n\\n:::info Reference\\nHere is a [youtube video](https://www.youtube.com/watch?v=xXwvDVGBlqQ) used as a main reference on how to configure this.\\nThere is also an official documentation in [Docusaurus](https://docusaurus.io/docs/search#using-algolia-docsearch)    \\n\\n\\nHere is the [pricing](https://www.algolia.com/pricing/) of Algolia, it comes with a free option.\\n:::\\n\\n## Create an Algolia account\\nTo create an Algolia account, check [here](https://www.algolia.com/).\\n\\n## Create a New Application\\nOn Algolia, select **Create Application**.\\n![New Application](new-application.png)\\nSelect **US West** as the region.\\n![New Application](new-application-2.png)\\nSelect **Create Application**.\\n![New Application](new-application-3.png)\\n\\n### Rename an Application\\nTo rename an application go to **Settings > Applications**.\\n![Go To Application](go-to-applications.png)\\nSelect the application you want to rename click on the three dots icon. Select **Rename**.\\n![Rename Application](rename-application.png)\\nInput the name of the application.\\n![Rename Application](rename-application-2.png)\\n\\n## Create a New API Key\\nTo create a new API key go to **Settings > API Keys**. Select **New API Key**.\\n![New API Key](new-api-key.png)\\nInput a description on the **Description** field. For the `Validity`, set it to `0`.\\n![New API Key](api-key-details.png)\\nOn the `ACL`, select `addObject`, `editSettings`, and `deleteIndex`.\\n![New API Key](api-key-details-2.png)\\nOnce the API Key is created, it should be shown on the list of **All API Keys**.\\n![API Key Created](api-key-created.png)\\n\\n## Create `.env` and `config.json` files\\nThe `.env` and `config.json` files should be created inlide with your main folder. Here is a sample folder structure:  \\n![Folder Structure](folder-structure.png)\\n\\n### The `.env` file\\nThe `.env` file should contain a key value pair of the `APPLICATION_ID` and `API_KEY`. Coppy the API key created at the previous step.\\n![env file](env-file.png)  \\nThe Application ID can be found on **Settings > API Keys**.\\n![Application ID](application-id.png) \\n### The `config.json` file\\nThe `config.json` contents can be found in this [link](https://github.com/algolia/docsearch-configs/blob/master/configs/docusaurus-2.json). \\nMake sure to modify the following: `index_name`, `start_urls`, and `sitemap_urls`.\\n![config.json](config-json.png) \\n\\n## Run the Crawler\\n:::caution Prerequisites\\nTo run the crawler there are some installations to be done, see details [here](https://docsearch.algolia.com/docs/legacy/run-your-own/#run-the-crawl-from-the-docker-image).\\n:::\\nMake sure to use a bash terminal, here i\'m using gitbash to run the following docker command:\\n```\\ndocker run -it --env-file=.env -e \\"CONFIG=$(cat /path/to/your/config.json | jq -r tostring)\\" algolia/docsearch-scraper\\n```\\nModify the path `/path/to/your/config.json`, see image below for example.\\n![Docker command](docker-command.png)\\nOnce the crawler is done. A index should be created on your Algolia account with the name of the `index_name` configured on `config.json` file.\\n![Indices](indices.png)\\n\\n## Update `docusaurus.config.js` file \\nUpdate the `docusaurus.config.js` file include these `Algolia: ` value under `themeConfig.`\\n![Update docusarus](update-docusaurus-config.png)\\nOn the `apiKey` use the search only API key.\\n![Search oly](search-only-apikey.png)\\n## Test locally\\nOnce able to successfully test, deploy the changes on your website.\\n![Test](test-locally.png)\\n:::note Congratulations!\\n\\nYou have now successfully added a search bar with [Algolia](https://www.algolia.com) in [Docusaurus](https://docusaurus.io/). Make sure to not push the `.env` and `config.json` files.\\n\\n:::"},{"id":"setup-gogs","metadata":{"permalink":"/personal-website/blog/setup-gogs","source":"@site/blog/2024-01-23-setup-gogs/index.mdx","title":"How to Setup Gogs","description":"Gogs allows deploying a local Git Server on your local machine. It comes with a web UI to facilitate pushing and pulling of code, it also includes pull requests and issues features.","date":"2024-01-23T00:00:00.000Z","tags":[{"inline":true,"label":"gogs","permalink":"/personal-website/blog/tags/gogs"},{"inline":true,"label":"git","permalink":"/personal-website/blog/tags/git"},{"inline":true,"label":"mysql","permalink":"/personal-website/blog/tags/mysql"}],"readingTime":1.155,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"setup-gogs","title":"How to Setup Gogs","authors":["ltuala"],"tags":["gogs","git","mysql"],"enableComments":true},"unlisted":false,"prevItem":{"title":"How to Add Search Bar in Docusaurus","permalink":"/personal-website/blog/add-search-bar"},"nextItem":{"title":"Adding Giscus to Docusaurus","permalink":"/personal-website/blog/add-giscus-to-docusaurus"}},"content":"Gogs allows deploying a local Git Server on your local machine. It comes with a web UI to facilitate pushing and pulling of code, it also includes pull requests and issues features. \\n\\n\x3c!--truncate--\x3e\\n:::caution Prerequisites\\nGogs requires the following to be installed on your local machine: [Database (MySQL)](https://dev.mysql.com/downloads/) and [Git](https://git-scm.com/download/win)\\n:::\\n## Here\'s a step-by-step guide on how to setup Gogs on your Windows machine:\\n\\n### 1. Install Gogs\\n\\nGogs can be downloaded [here](https://gogs.io/docs/installation/install_from_binary). Select ZIP under Windows system.\\n![Gogs download](gogs-download.png)\\n\\n### 2. Create a MySQL database named `gogs`\\n\\nMake sure to set the charset to `utf8_general_ci`.\\n![Gogs database](gogs-db.png)\\n\\n### 3. Unzip the file and install Gogs\\n\\nRun the following command:\\n\\n```\\n./gogs web\\n```\\nFor the `Database Type`, select `MySQL`.Fill up the necessary details like `User` and `Password`.\\n![Gogs instal](gogs-install.png)\\n\\nClick `Install Gogs`.\\n![Gogs instal](gogs-install2.png)\\n\\n### 4. Create a Gogs account\\nAfter clicking Install Gogs. You\'ll be redirected to the login page. Create an account by clicking the `Need an account? Sign up now.`\\n![Gogs sign-up](gogs-sign-up.png)\\n\\n### 5. Sign in\\n\\nSign in to your account.\\n![Gogs sign-in](gogs-sign-in.png)\\nAfter signing in you should now be able to use Gogs. Try to create your new Gogs repo.\\n![Gogs dashboard](gogs-dashboard.png)\\n\\n\\n:::note Congratulations!\\n\\nYou have now successfully installed Gogs on your local machine, allowing you to create code repository, push and pull code changes, and use the features like pull requests and issues.\\n\\n:::"},{"id":"add-giscus-to-docusaurus","metadata":{"permalink":"/personal-website/blog/add-giscus-to-docusaurus","source":"@site/blog/2023-12-15-add-giscus-to-docusaurus/index.mdx","title":"Adding Giscus to Docusaurus","description":"As I browse through different tech blog articles and able to read this, inspired me to add commenting system in this blog.","date":"2023-12-15T00:00:00.000Z","tags":[{"inline":true,"label":"giscus","permalink":"/personal-website/blog/tags/giscus"},{"inline":true,"label":"docusaurus","permalink":"/personal-website/blog/tags/docusaurus"}],"readingTime":1.635,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"add-giscus-to-docusaurus","title":"Adding Giscus to Docusaurus","authors":["ltuala"],"tags":["giscus","docusaurus"],"enableComments":true},"unlisted":false,"prevItem":{"title":"How to Setup Gogs","permalink":"/personal-website/blog/setup-gogs"},"nextItem":{"title":"Ashabeneh\'s 30 Days of JavaScript","permalink":"/personal-website/blog/30-days-of-js"}},"content":"As I browse through different tech blog articles and able to read [this](https://ljvmiranda921.github.io/notebook/2021/08/08/clip-vqgan/), inspired me to add commenting system in this blog.\\n![utterances](utterances.png)This used [utterances](https://github.com/utterance/utterances), but I haven\'t found any reliable documentation on how to set it up on Docusaurus until I\'ve stumbled upon [giscus](https://giscus.app/).\\n\\n\x3c!--truncate--\x3e\\n\\n## Here\'s a step-by-step guide on how to add Giscus to Docusaurus:\\n\\n### Install Giscus\\n\\n```bash\\nnpm install -D @giscus/react\\n```\\n\\n### Enable Github Discussions\\n\\nDiscussion feature of Github can be seen [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/enabling-or-disabling-github-discussions-for-a-repository).\\n\\n### Giscus Configuration\\n\\nFill up necessary details [here](https://giscus.app/) to acquire giscus configuration. Look something like this:\\n\\n```html\\n<script src=\\"https://giscus.app/client.js\\"\\n        data-repo=\\"[ENTER REPO HERE]\\"\\n        data-repo-id=\\"[ENTER REPO ID HERE]\\"\\n        data-category=\\"[ENTER CATEGORY NAME HERE]\\"\\n        data-category-id=\\"[ENTER CATEGORY ID HERE]\\"\\n        data-mapping=\\"pathname\\"\\n        data-strict=\\"0\\"\\n        data-reactions-enabled=\\"1\\"\\n        data-emit-metadata=\\"0\\"\\n        data-input-position=\\"bottom\\"\\n        data-theme=\\"preferred_color_scheme\\"\\n        data-lang=\\"en\\"\\n        crossorigin=\\"anonymous\\"\\n        async>\\n<\/script>\\n```\\n\\n### Generate BlogPostItem component\\n\\nRun this comand in your terminal.\\n\\n```bash\\nnpm run swizzle [theme name] [component name] -- --wrap\\n\\n# Example:\\nnpm run swizzle @docusaurus/theme-classic BlogPostItem -- --wrap\\n```\\n\\nIt will generate a BlogPostItem component under `src/theme`. Edit `index.js`\\n\\n```js\\nimport React from \'react\';\\nimport { useBlogPost } from \'@docusaurus/theme-common/internal\'\\nimport BlogPostItem from \'@theme-original/BlogPostItem\';\\nimport GiscusComponent from \'@site/src/components/GiscusComponent\';\\nimport useIsBrowser from \'@docusaurus/useIsBrowser\';\\n\\nexport default function BlogPostItemWrapper(props) {\\n  const { metadata, isBlogPostPage } = useBlogPost()\\n  const isBrowser = useIsBrowser();\\n\\n  const { frontMatter, slug, title } = metadata\\n  const { enableComments } = frontMatter\\n\\n  return (\\n    <>\\n      <BlogPostItem {...props} />\\n      {(enableComments && isBlogPostPage) && (\\n        <GiscusComponent />\\n      )}\\n    </>\\n  );\\n}\\n```\\n\\n### Create your Blog\\nOn your markdown file, add `enableComments`\\n```markdown\\n---\\ntitle: Title of blog\\nauthors: author\\ntags: [tagOne, tagTwo]\\nenableComments: true # To enable Giscus\\n---\\n```\\n\\n### Test Your Docusaurus Site\\n\\nRun your Docusaurus development server to test the changes\\n\\n```bash\\nnpm start\\n```\\n\\nOpen your browser and navigate to the page where you added the Giscus comments section.\\nCheck if the comments section is displayed and functional.\\n\\n:::note Congratulations!\\n\\nYou have successfully added Giscus to your Docusaurus site, allowing users to leave comments using their GitHub accounts.\\n\\n:::"},{"id":"30-days-of-js","metadata":{"permalink":"/personal-website/blog/30-days-of-js","source":"@site/blog/2023-12-05-30-days-of-js/index.mdx","title":"Ashabeneh\'s 30 Days of JavaScript","description":"I find learning new programming language exciting.","date":"2023-12-05T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/personal-website/blog/tags/javascript"},{"inline":true,"label":"challenges","permalink":"/personal-website/blog/tags/challenges"}],"readingTime":6.235,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"30-days-of-js","title":"Ashabeneh\'s 30 Days of JavaScript","authors":["ltuala"],"tags":["javascript","challenges"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Adding Giscus to Docusaurus","permalink":"/personal-website/blog/add-giscus-to-docusaurus"},"nextItem":{"title":"Github Integration on Jira","permalink":"/personal-website/blog/github-jira-integ"}},"content":"I find learning new programming language exciting. \\nA lot more exciting if you come across with a well-structured and interactive course.\\nOne such resource is [**\\"30 Days of JavaScript\\"**](https://github.com/Asabeneh/30-Days-Of-JavaScript) by Ashabeneh, recommended by my colleague [JC](https://github.com/jcawesome).\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\n[**\\"30 Days of JavaScript\\"**](https://github.com/Asabeneh/30-Days-Of-JavaScript) by Ashabeneh, can be found in Github, there is a markdown file for each day consisting of lectures as well as exercises.\\nIf you\'re the type of learner who thrives on reading rather than following video tutorials, then this course might be the perfect fit for you.\\n:::\\n\\n## Course Outline\\n[^1]![30 Days Course Outline](30D-course-outline.png)\\n\\n### Day 1 to 5: JavaScript Fundamentals\\nYou will learn the JavaScript fundamentals: console, script structure etc, data types, conditionals and variables.\\n\\n#### Some Learnings \\nHere are some topics or ideas derived from the course to provide you some snippet of the lectures, these are somewhat I find unique compared to other programming languages that I\'ve known so far.\\n\\n:::note typeof\\n\\nTo check the data type of a certain variable, we use the **typeof** operator. See the following example.\\n\\n```js\\nconsole.log(typeof \'Asabeneh\') // string\\nconsole.log(typeof 5) // number\\nconsole.log(typeof true) // boolean\\nconsole.log(typeof null) // object type\\nconsole.log(typeof undefined) // undefined\\n```\\nSee [checking data types](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/readMe.md#checking-data-types)\\n:::\\n\\nThe syntax is quite new to me.\\n\\n:::note Window prompt() method\\n\\nThe window prompt methods display a prompt box with an input on your browser to take input values and the input data can be stored in a variable. The prompt() method takes two arguments. The second argument is optional.\\n\\n```js\\nprompt(\'required text\', \'optional text\')\\n```\\n\\n```js\\nlet number = prompt(\'Enter number\', \'number goes here\')\\nconsole.log(number)\\n```\\n\\nSee [window prompt() method](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/readMe.md#checking-data-types)\\n:::\\n\\nUsing the browser as an interface instead of the terminal for inputting data.\\n\\n### Day 6 to 20: JavaScript Programming\\nAs you advance, the foundation of programming will come into play by using loops, functions, objects, classes, etc. \\nYou can now start with dynamic programming then will let you explore concepts like promises, focusing on data handling and manipulation.\\nCompleting provided exercises, which are categorize into three levels, is a must to fully understand the concepts.\\n\\n:::note sample exercises\\n\\nExercises: Level 1\\n\\n1. Declare a function _fullName_ and it print out your full name.\\n2. Declare a function _fullName_ and now it takes firstName, lastName as a parameter and it returns your full - name.\\n\\n...\\n\\nExercises: Level 2\\n\\n1. Linear equation is calculated as follows: _ax + by + c = 0_. Write a function which calculates value of a linear equation, _solveLinEquation_.\\n2. Quadratic equation is calculated as follows: _ax2 + bx + c = 0_. Write a function which calculates value or values of a quadratic equation, _solveQuadEquation_.\\n\\n    ```js\\n    console.log(solveQuadratic()) // {0}\\n    console.log(solveQuadratic(1, 4, 4)) // {-2}\\n    console.log(solveQuadratic(1, -1, -2)) // {2, -1}\\n    console.log(solveQuadratic(1, 7, 12)) // {-3, -4}\\n    console.log(solveQuadratic(1, 0, -4)) //{2, -2}\\n    console.log(solveQuadratic(1, -1, 0)) //{1, 0}\\n    ```\\n...\\n\\nExercises: Level 3\\n\\n1. Modify the _userIdGenerator_ function. Declare a function name _userIdGeneratedByUser_. It doesn\u2019t take any parameter but it takes two inputs using prompt(). One of the input is the number of characters and the second input is the number of ids which are supposed to be generated.\\n\\n    ```sh\\n    userIdGeneratedByUser()\\n    \'kcsy2\\n    SMFYb\\n    bWmeq\\n    ZXOYh\\n    2Rgxf\\n    \'\\n    userIdGeneratedByUser()\\n    \'1GCSgPLMaBAVQZ26\\n    YD7eFwNQKNs7qXaT\\n    ycArC5yrRupyG00S\\n    UbGxOFI7UXSWAyKN\\n    dIV0SSUTgAdKwStr\\n    \'\\n    ```\\n\\n2. Write a function name _rgbColorGenerator_ and it generates rgb colors.\\n\\n    ```sh\\n    rgbColorGenerator()\\n    rgb(125,244,255)\\n    ```\\n...\\n:::\\n\\nIts well-curated exercises is what I loved the most in this course.\\n\\n### Day 21 to 22: DOM \\nAfter foundation of programming, you will start working with the Document Object Model (DOM). \\nEnabling you to dynamically modify CSS and HTML, fancy stuff \ud83d\ude0a. \\nThis will give you a brief overview on how responsive and interactive websites are created. \\n\\n### Day 23: Event Listeners\\nAs you now know how to modify DOM elements, events and event listeners is essential if you want to create responsive and interactive websites. \\nThis will allow you to create conditions on different user interactions.\\n  \\n### Day 24 to 30: Mini Projects: \\nThe last part of the course will be devoted to mini projects.\\nThis will focus on applying everything you\'ve learnt so far, so there are no lectures only exercises.\\nThere are plenty of project ideas, so there are options for you to try different mini projects based on your interests.\\n\\n:::note sample mini project\\nDevelop a small application which calculate a weight of an object in a certain planet.\\n![Solar System](dom_min_project_solar_system_day_4.1.gif)\\n\\nSee [Mini Project Solar System](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/24_Day_Project_solar_system/24_day_project_solar_system.md#exercise-level-1)\\n:::\\n\\n## Some Other Learnings\\nHere are some other topics or ideas derived from the course that I find interesting:\\n\\n:::note for of loop\\n\\nWe use for of loop for arrays. It is very hand way to iterate through an array if we are not interested in the index of each element in the array.\\n\\n```js\\nfor (const element of arr) {\\n  // code goes here\\n}\\n```\\n\\nSee [for of loop](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/06_Day_Loops/06_day_loops.md#for-of-loop)\\n:::\\n\\nWell the syntax is new to me.\\n\\n:::note argument\\n\\n A function declaration provides a function scoped arguments array like object. Any thing we passed as argument in the function can be accessed from arguments object inside the functions. Let us see an example\\n\\n ```js\\n// Let us access the arguments object\\n\u200b\\nfunction sumAllNums() {\\n  console.log(arguments)\\n}\\n\\nsumAllNums(1, 2, 3, 4)\\n// Arguments(4)\xa0[1, 2, 3, 4, callee: \u0192, Symbol(Symbol.iterator): \u0192]\\n\\n```\\n\\nSee [unlimited number of parameters in regular function](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/07_Day_Functions/07_day_functions.md#unlimited-number-of-parameters-in-regular-function)\\n:::\\n\\nThe `arguments` holds the value of passed parameters of the function. \\n\\n:::note arrow function\\n\\n Arrow function does not have the function scoped arguments object. To implement a function which takes unlimited number of arguments in an arrow function we use spread operator followed by any parameter name.  Any thing we passed as argument in the function can be accessed as array in the arrow function. Let us see an example\\n\\n ```js\\n// Let us access the arguments object\\n\u200b\\nconst sumAllNums = (...args) => {\\n  // console.log(arguments), arguments object not found in arrow function\\n  // instead we use a parameter followed by spread operator (...)\\n  console.log(args)\\n}\\n\\nsumAllNums(1, 2, 3, 4)\\n// [1, 2, 3, 4]\\n\\n```\\n\\nSee [unlimited number of parameters in arrow function](https://github.com/Asabeneh/30-Days-Of-JavaScript/blob/master/07_Day_Functions/07_day_functions.md#unlimited-number-of-parameters-in-arrow-function)\\n:::\\n\\nThe distinction of JavaScript compared to other languages `=>`, the syntax of arrow function. Use spread operator instead of `arguments` if you use the arrow function syntax for creating the function.\\n\\n:::note order of script tag\\n\\nThe order of script tag matters, when importing variable from other files.\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n    <meta charset=\\"UTF-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n    <title>Exercises</title>\\n</head>\\n<body>\\n    <script src=\\"countries.js\\"><\/script>\\n    <script src=\\"webTechs.js\\"><\/script>\\n    <script src=\\"index.js\\"><\/script>\\n</body>\\n</html>\\n```\\nOn `index.js` file, you can import variables defined on either `countries.js` or `webTechs.js`. \\nBut when you create script inside `webTechs.js` you cannot use directly the variable defined on `index.js`, only the variables defined on `countries.js`\\n:::\\n\\n## Final Thoughts\\nThe way the course is well-structured with exercises per day makes it manageable, although I struggle to be consistent. Well, that\'s on me, not the course itself. \\nHere\'s the [repository](https://github.com/ltuala/30-Days-Of-JavaScript) of my progress.\\n\\n:::caution Heads up\\n\\nSome of the mini projects don\'t have a template for HTML and CSS, so you might find it difficult to accomplish them if you\'re not yet comfortable with HTML and CSS. \\n\\n:::\\n\\nThis course serves as a valuable resource, for a complete beginner like me or someone looking to learn or revisit the JavaScript language.\\nI would like to express my gratitude to [JC](https://github.com/jcawesome) for introducing me to this course.\\n\\n## Footnotes\\n[^1]: Built using [draw.io](https://app.diagrams.net/) and [undraw](https://undraw.co/illustrations)"},{"id":"github-jira-integ","metadata":{"permalink":"/personal-website/blog/github-jira-integ","source":"@site/blog/2023-06-29-github-jira-integ/index.mdx","title":"Github Integration on Jira","description":"Integrating Jira and Github provides a more organized software development lifecycle.","date":"2023-06-29T00:00:00.000Z","tags":[{"inline":true,"label":"github","permalink":"/personal-website/blog/tags/github"},{"inline":true,"label":"jira","permalink":"/personal-website/blog/tags/jira"}],"readingTime":1.33,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"github-jira-integ","title":"Github Integration on Jira","authors":["ltuala"],"tags":["github","jira"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Ashabeneh\'s 30 Days of JavaScript","permalink":"/personal-website/blog/30-days-of-js"},"nextItem":{"title":"Timefold PAS Use Case","permalink":"/personal-website/blog/setup-pas"}},"content":"Integrating Jira and Github provides a more organized software development lifecycle.\\nAs the issues will link to a specific branch in your Github code repository.\\nProviding a more organized workflow since Jira will be used as a develop management tool and Github will be the version control tool as a result a more structured development workflow.\\n\\n\x3c!--truncate--\x3e\\n\\n:::caution\\nTo follow along the steps make sure you have Admin privileges on the Jira account and Github account.\\n:::\\n\\n## 1. On the Jira account under Apps, get the app Github for Jira\\nInstalling __Github for Jira__ will be the first step to configure Github Jira integration.\\n![Github for Jira](github-for-jira.png)\\n### a. Go to Apps > Explore more apps.\\n![Apps](apps.png)\\n### b. On the search box, type Github for Jira. then, select Get app.\\n![Type Github for Jira](type-github-for-jira.png)\\n![Get App](get-app.png)\\n### c. Select Get it now.\\n![Get it now](get-it-now.png)\\n## 2. Github for Jira configuration\\nNext steps, are how to setup the configuration for integrating Github to Jira.\\n### a. Select Get Started.\\n![Get started](get-started.png)\\n### b. Select Connect Github organization.\\n![Connect Github organization](connect-github-organization.png)\\n### c. Select Github Cloud. Then, select Continue.\\n![Github Cloud](github-cloud.png)\\n### d. Login to Github.\\n![Github login](github-login.png)\\n### e. Click Authorize Jira.\\n![Authorize Jira](authorize-jira.png)\\n### f. Select Install Github for Jira on a new organization.\\n![Connect Github](connect-github.png)\\n![Install Jira](install-jira.png)\\n### g. Go back to Jira, select Conect Github organization and click Connect.\\n![Connect Organization](connect-organization.png)<br />\\nNow, Jira will take few minutes depending on the size of Github repositories.\\n![Github loading](github-loading.png)\\n<br />\\n\\n:::info\\nSee [Integrate Jira Software with GitHub Cloud](https://support.atlassian.com/jira-cloud-administration/docs/integrate-with-github/), for official documentation.\\n:::"},{"id":"setup-pas","metadata":{"permalink":"/personal-website/blog/setup-pas","source":"@site/blog/2023-06-28-setup-pas/index.mdx","title":"Timefold PAS Use Case","description":"Current Timefold examples already runs on Quarkus 3 already. Let\u2019s see how we can successfully setup a Timefold use case example and use it as a baseline for another Timefold project.","date":"2023-06-28T00:00:00.000Z","tags":[{"inline":true,"label":"timefold","permalink":"/personal-website/blog/tags/timefold"},{"inline":true,"label":"quarkus","permalink":"/personal-website/blog/tags/quarkus"}],"readingTime":1.105,"hasTruncateMarker":true,"authors":[{"name":"Lyndon Tuala","title":"Newbie","url":"https://github.com/ltuala","imageURL":"https://github.com/ltuala.png","key":"ltuala","page":null}],"frontMatter":{"slug":"setup-pas","title":"Timefold PAS Use Case","authors":["ltuala"],"tags":["timefold","quarkus"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Github Integration on Jira","permalink":"/personal-website/blog/github-jira-integ"}},"content":"Current Timefold examples already runs on Quarkus 3 already. Let\u2019s see how we can successfully setup a Timefold use case example and use it as a baseline for another Timefold project.\\n\\n\x3c!--truncate--\x3e\\n:::info\\nTimefold [PAS](https://timefold.ai/docs/timefold-solver/latest/use-cases-and-examples/use-cases-and-examples.html#bedAllocation) example was not built with Quarkus, \\nas a result I just use the [Maintenance scheduling](https://github.com/TimefoldAI/timefold-quickstarts#maintenance-scheduling) use case as a baseline.\\n:::\\n\\n## Setup a new Quarkus Project\\n:::caution\\n**Quarkus 3** requires a Java version **17+**. See [JDK on Windows](https://docs.oracle.com/en/java/javase/20/install/installation-jdk-microsoft-windows-platforms.html), for official documentation on how to install JDK.\\n:::\\n### Go to [code.quarkus.io](https://code.quarkus.io/)\\nFill in the `Group`, `Artifact` and `Build Tool`\\n![quarkus-io](quarkus-io.png)\\n### Click Generate your application\\nNo other library or package is needed on our new project.\\n![Generate you application](generate-your-application.png)\\n### Select download the zip.\\n![Download zip](download-zip.png)\\n### Extract and open via code editor.\\nThe folder structure and content should look like this.\\n![Folder structure](folder-structure.png)\\n## Setup Timefold Quickstarts\\n### Clone or download timefold-quickstarts repository\\nClick [here](https://github.com/TimefoldAI/timefold-quickstarts) to clone or download the repository.\\n![Timefold quickstarts](timefold-quickstarts.png)\\n### Run the Maintence scheduling use case\\n![Maintenance scheduling](maintenance-scheduling.png)\\n### Merge the Maintenance scheduling use case to the new Quarkus project.\\nMake sure to refactor the package name on every code files. Just overwrite the `pom.xml` with the example packages. <br />\\nOn `line 8` onwards, this is where I overwrite all the packages.\\n![Overwrite pom](overwrite-pom.png)\\nCustomize `index.html` to your liking."}]}}')}}]);